package com.example.Student_Library_Management_System.Services;

import com.example.Student_Library_Management_System.DTOs.StudentUpdateMobNoRequestDto;
import com.example.Student_Library_Management_System.Enums.CardStatus;
import com.example.Student_Library_Management_System.Models.Card;
import com.example.Student_Library_Management_System.Models.Student;
import com.example.Student_Library_Management_System.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StudentService {

    @Autowired
    StudentRepository studentRepository;

    public String createStudent(Student student) {

        // student from postman has the basic attributes set


        //Card should be autoGenerated when addStudent function is called
        // --> all attributes are autogenerated apart from CardStatus and studentVariableName
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED);
        card.setStudentVariableName(student);

        //now go to student
        student.setCard(card);

        //if we were using uniDirectional mapping then we have to save both Student and card Entity
        // eg - studentRepo.save() & cardRepo.save()

        //but we are using BiDirectional mapping so child will automatically be saved

        studentRepository.save(student);

        //By cascading effect, child will be automatically saved

        return "Student and Card created Successfully";
    }


    public String findNameByEmail(String email) {
        Student student = studentRepository.findByEmail(email);
        return student.getName();
    }

//    public String updateMobNo(Student newStudent) {
//        //first i will get the Original Student
//        Student originalStudent = studentRepository.findById(newStudent.getId()).get();
//
//        originalStudent.setMobNo(newStudent.getMobNo());
//
//        studentRepository.save(originalStudent);
//
//        return "Student Mobile No Updated Successfully";
//    }

    public String updateMobNo(StudentUpdateMobNoRequestDto studentRequest) {
        //first I will CONVERT DTO to ENTITY
        Student originalStudent = studentRepository.findById(studentRequest.getId()).get();
        //form id fetched student object

        originalStudent.setMobNo(studentRequest.getMobNo());

        studentRepository.save(originalStudent);

        return "Student Mobile No Updated Successfully";
    }
}
